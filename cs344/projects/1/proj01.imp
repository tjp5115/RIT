;; Name: Tyler Paulsen 
;; Time spent on assignment: ~4 hrs
;; Collaborators: 

;;helper functions

;; decrement by 1
;; i - number to increment
(define -- (i) (- i 1))

;; increment by 1
;; i - number to increment
(define ++ (i) (+ i 1))

;; permutation function
;; i - number to computate permuation on.
(define perm (i) 
	(if (= i 0)
		1
		(if (= i 1)
			1
			(* i (perm (-- i) ) )
		)
	)
)

;; or two ints together
;; if n or m is greater than 1. return 1
;; else return 0;
;; n - int to perfor or on
;; m - int to perfor or on
(define or (n m) 
	(if (> n 0)
		1
		(if (> m 0)
			1
			0
		)
	)
)

;; and two ints together
;; if n and m are greater than 1. return 1
;; else return 0;
;; n - int to perfor and on
;; m - int to perfor and on
(define and (n m) 
	(if (= n 0)
		0
		(if (= m 0)
			0
			1
		)
	)
)

;; take an integer to a power. n^m
;; n - the base of the power
;; m - the exponent of the power
(define pow (n m)
	(if (= n 0)
		n
		(pow (* n n) (-- m))
	)
)

;; modulos of two integers
;; m - base int ( m % n )
;; n - modulos int(dont know what to call this) ( m % n )
(define mod (m n)
	(if (< m n)
		m
		(modHelper m n n)
	)
)
;; modulos helper for recursion implementation
;; m - base int ( m % n )
;; n - modulos int(dont know what to call this) ( m % n )
;; i - counter
(define modHelper (m n i)
	(if (= m i)
		0
		(if (> i m)
			(- i m)
			(modHelper	m n (+ i n))
		)
	)
)

;; Exercise 3
;; DEFINE sigma HERE
(define sigma (m n) 
	(if (> m n)
		0
		(+ m (sigma (++ m)  n ) )
	)
)

;; Exercise 4a
;; DEFINE exp HERE

(define exp (m n)
	(if (= n 0)
		1
		(* m (exp m (-- n) ) )
	)

)

;; Exercise 4a
;; DEFINE log HERE

(define log (m n)
	(logHelper m n 0)
)

(define logHelper (m n i)
	(if (> (exp m i) n)
		( -- i )
		(logHelper m n (++ i))
	)
)
;; Exercise 5
;; DEFINE choose HERE
(define choose (n k)
	(if (= k 0) 
		1
		(if (= k n) 
			1
			(+ (choose (- n 1) (- k 1) ) (choose (- n 1) k ) )
		)
	)
)

;; Exercise 6
;; DEFINE fib HERE
(define fib (m)
	(if (= m 0)
		0
		(if (= m 1)
			1
			(fibHelper m 2 1 1)
		)
	)
)

(define fibHelper (m i k j)
	(if (= m i)
		j
		( fibHelper m (++ i) j (+ k j) )
	)
)

;; Exercise 7a
;; DEFINE prime? HERE
(define prime? (n)
	(if (= n 2)
		1
		(if (= n 3)
			1
			(if (= (mod n 2) 0) 
				0
				(prime?Helper n 2 )
			)
		)
	)
)

(define prime?Helper (n i)
	(if (= (/ n 2) i)
		1
		(if (= ( mod n i ) 0)
			0
			(prime?Helper n (++ i) )
		)
	)
)

;; Exercise 7b
;; DEFINE nthprime HERE
(define nthprime (n)
	(nthprimeHelper n 1 2)
)
(define nthprimeHelper ( n i k)
	(if (prime? k) 
		(if ( = i n)
			k
			(nthprimeHelper  n (++ i) (++ k))
		)
		(nthprimeHelper n i (++ k))
	)
)

;; Exercise 7c
;; DEFINE sumprimes HERE
(define sumprimes (n)
	(sumprimesHelper n 1)
)
(define sumprimesHelper (n i)
	(if (= n i)
		(nthprime i)
		(+ (nthprime i) (sumprimesHelper n (++ i)))
	)
)

;; Exercise 7d
;; DEFINE relprime? HERE
(define relprime? (n m)
	(if (or (= (mod n m) 0) (= (mod m n) 0) )
		0
		(if (and (= (mod n 2) 0) (= (mod m 2) 0))
			0
			(if (and (= (prime? n) 1) (= (prime? m) 1) )
				1
				(relprimeHelper n m 2)
			)
		)
	)
)
(define relprimeHelper (n m i)
	(if (= i (/ n 2))
		1
		(if (= i (/ m 2))
			1
			(if (= (mod m i) 0)
				(if (= (mod n i) 0)
					0
					(relprimeHelper n m (++ i))
				)
				(relprimeHelper n m (++ i))
			)
		)
	)
)
;; Exercise 8
;; DEFINE binary HERE
(define binary (n)
	(if (= n 0)
		0
		(if (< n 0)
			(* -1 (binaryHelper (* n -1) 1) )
			(binaryHelper n 1) 
		)
	)
)
(define binaryHelper (n i)
	(if (< n 2) 
		(* (exp 10 (- i 1)) (mod n 2))
		(begin 
			(print n)
			(+ (binaryHelper (/ n 2) (++ i)) (* (exp 10 (- i 1)) (mod n 2)) )
		)
	)
)

